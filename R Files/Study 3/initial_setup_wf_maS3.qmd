---
title: "White Fragility & Moral Affirmation S3"
format:
  html:
    toc: true
    embed-resources: true
    
execute:
  echo: false
  warning: false

from: markdown+emoji 
---

# Loading packages

```{r Packages, results='hide'}
library(ggpubr)
library(psych)
library(tidyverse)
library(dplyr)
library(readr)
library(corrplot)
library(readxl)
library(ggplot2)
library(effectsize)
library(lsr)
library(interactions)
library("emmeans")
options(scipen = 100)
```

# Data Management

```{r Data import for macbook, results='hide'}
wf_dt2 <- read_csv("~/Documents/GitHub/Buying-Black/Buying Black and Moral Affirmation/Data/wf_maS3.csv")
```
```{r Data import for macbook, results='hide'}
#wf_dt2 <- read_csv("~/Documents/Buying Black GIT/Buying Black and Moral Affirmation/Data/wf_maS3.csv")
```
```{r creating condition variables, results='hide'}
wf_dt2 <- wf_dt2 %>%
  mutate(
    condition = rowSums(select(., control_white, control_black, nogap_white, nogap_black, gap_black, gap_white), na.rm = TRUE)
  )
factor(wf_dt2$condition)
```
```{r creating article and brand race variables}
wf_dt2 <- wf_dt2 %>%
  mutate(
    article_condition = case_when(
      condition %in% c(0, 1) ~ 0,
      condition %in% c(2, 3) ~ 1,
      condition %in% c(4, 5) ~ 2,
      TRUE ~ NA_integer_)) %>% mutate(
    brand_race = case_when(
      condition %in% c(0, 2, 4) ~ 0,
      condition %in% c(1, 3, 5) ~ 1,
      TRUE ~ NA_integer_
    ))
wf_dt2 <- wf_dt2 %>% mutate(article_condition = as.factor(article_condition), as.factor(brand_race))
```
```{r creating shopping intentions}
wf_dt2 <- wf_dt2 %>%
  mutate(
    shop_intentions = rowSums(select(., rl_shop_intentions, rr_shop_intentions), na.rm = TRUE)
  )
# Centering and z-score for "shop_intentions"
wf_dt2$shop_intentions_centered <- scale(wf_dt2$shop_intentions, center = TRUE, scale = FALSE) # Centering
wf_dt2$shop_intentions_Z <- scale(wf_dt2$shop_intentions, center = TRUE, scale = TRUE) # Z-score
```
```{r creating purchase}
wf_dt2 <- wf_dt2 %>%
  mutate(
    purchase = rowSums(select(., rl_purchase, rr_purchase), na.rm = TRUE)
  )
# Centering and z-score for "purchase"
wf_dt2$purchase_centered <- scale(wf_dt2$purchase, center = TRUE, scale = FALSE) # Centering
wf_dt2$purchase_Z <- scale(wf_dt2$purchase, center = TRUE, scale = TRUE) # Z-score
```
```{r creating word of mouth}
wf_dt2 <- wf_dt2 %>%
  mutate(
    wom = rowSums(select(., rl_wom, rr_wom), na.rm = TRUE)
  )
# Centering and z-score for "wom"
wf_dt2$wom_centered <- scale(wf_dt2$wom, center = TRUE, scale = FALSE) # Centering
wf_dt2$wom_Z <- scale(wf_dt2$wom, center = TRUE, scale = TRUE) # Z-score
```
```{r creating brand attitude}
wf_dt2 <- wf_dt2 %>%
  mutate(
    attitude = rowSums(select(., rl_attitude, rr_attitude), na.rm = TRUE)
  )
# Centering and z-score for "attitude"
wf_dt2$attitude_centered <- scale(wf_dt2$attitude, center = TRUE, scale = FALSE) # Centering
wf_dt2$attitude_Z <- scale(wf_dt2$attitude, center = TRUE, scale = TRUE) # Z-score
```

Creating a brand support variable

```{r}
brand_support_alpha <- select(wf_dt2, wom, purchase, shop_intentions, attitude) # dropping certain variables for the alpha
psych::alpha(brand_support_alpha)
```

```{r}
wf_dt2 <- wf_dt2 %>%
  mutate(
    support = rowSums(select(., rl_attitude, rr_attitude, rl_wom, rr_wom, rl_purchase, rr_purchase, rl_shop_intentions, rr_shop_intentions), na.rm = TRUE)
  )
# Centering and z-score for the combined variable "black_support"
wf_dt2 <- wf_dt2 %>%
  mutate(
    support_centered = scale(rowSums(select(., support), na.rm = TRUE), center = TRUE, scale = FALSE),
    support_Z = scale(rowSums(select(., support), na.rm = TRUE), center = TRUE, scale = TRUE)
  )
```
```{r}
wf_dt2 <- wf_dt2 %>%
  mutate(
    black_support = rowSums(select(., rr_attitude, rr_wom, rr_purchase, rr_shop_intentions), na.rm = TRUE)
  )
# Centering and z-score for the combined variable "black_support"
wf_dt2 <- wf_dt2 %>%
  mutate(
    black_support_centered = scale(rowSums(select(., support), na.rm = TRUE), center = TRUE, scale = FALSE),
    black_support_Z = scale(rowSums(select(., support), na.rm = TRUE), center = TRUE, scale = TRUE)
  )
```

# Demographics

```{r Race}
race_proportions <- table(wf_dt2$race)/length(wf_dt2$race) # creating race table
(race_percentages <- race_proportions*100) # multiplying the table by 100 to get percentages
```
```{r Gender}
gender_proportions <- table(wf_dt2$gender)/length(wf_dt2$gender) # creating gender table
(gender_percentages <- gender_proportions*100) # multiplying the table by 100 to get percentages
```
```{r Political Affiliation}
political_proportions <- table(wf_dt2$polit_affil)/length(wf_dt2$polit_affil) # creating political table
(political_percentages <- political_proportions*100) # multiplying the table by 100 to get percentages
```
```{r Education}
education_proportions <- table(wf_dt2$education)/length(wf_dt2$education) # creating education table
(education_percentages <- education_proportions*100) # multiplying the table by 100 to get percentages
```
```{r IAT previous}
iatprev_proportions <- table(wf_dt2$iat_prev)/length(wf_dt2$iat_prev) # creating IAT previously table
(iatprev_percentages <- iatprev_proportions*100) # multiplying the table by 100 to get percentages
```
```{r IAT racial}
iatracial_proportions <- table(wf_dt2$iat_racial)/length(wf_dt2$iat_racial) # creating IAT racial table
(iatracial_percentages <- iatracial_proportions*100) # multiplying the table by 100 to get percentages
```


# Defensiveness --

```{r Cronbach alpha for Defensiveness, results='hide'}
defensive <- select(wf_dt2, 39:42)
psych::alpha(defensive)
```
```{r Defensiveness Variables, results='hide'}
wf_dt2$defensive <- rowMeans(wf_dt2[,39:42]) # creating defensiveness variable
myscale <- 1:7 #defining scale to reverse defensivness variable
wf_dt2 <- wf_dt2 %>%
  mutate(defensive_reverse = min(myscale) - defensive + max(myscale)) # reversing defensivness scale
wf_dt2$defensive_reverse_centered <- scale(wf_dt2$defensive_reverse, center = TRUE, scale = FALSE) #centering the variable
wf_dt2$defensive_reverse_Z <- scale(wf_dt2$defensive_reverse, center = TRUE, scale = TRUE) # z score defensiveness 
```
```{r}
# Perform ANOVA for defensive_reverse by bias
summary((anova_defensive_reverse <- aov(defensive_reverse ~ article_condition, data = wf_dt2)))

# Get summary of ANOVA
(tukey_posthoc <- TukeyHSD(anova_defensive_reverse))

```
```{r Defensiveness across conditions}
wf_dt2 %>%
  group_by(article_condition) %>%
  summarize(mean_defensive_reverse = mean(defensive_reverse, na.rm = TRUE))
summary(lm(defensive_reverse ~ article_condition, wf_dt2))
```

As predicted we do find a main effect for bias condition (i.e., feedback) on defensiveness such that those who learned they were biased responded more defensively.

# Bias Awareness

```{r Cronbach alpha for Bias Awareness}
bias_aware <- select(wf_dt2, 176:179)
psych::alpha(bias_aware)
```
```{r Bias Awareness Variables}
wf_dt2$bias_aware <- rowMeans(wf_dt2[,176:179])
wf_dt2$bias_aware_center <- scale(wf_dt2$bias_aware, center = TRUE, scale = FALSE) #centering the variable
wf_dt2$bias_aware_Z <- scale(wf_dt2$bias_aware, center = TRUE, scale = TRUE) #Z scores 
```


As expected bias-awareness does not differ by condition, suggesting that we can use bias-awareness scores as a moderator.

# Emotions

```{r Z Scoring Variables t1}
wf_dt2$BMIS_guilt_1_Z <- scale(wf_dt2$BMIS_guilt_1, center = TRUE, scale = TRUE) #Z score
wf_dt2$BMIS_shame_1_Z <- scale(wf_dt2$BMIS_shame_1, center = TRUE, scale = TRUE) #Z score
wf_dt2$BMIS_sad_1_Z <- scale(wf_dt2$BMIS_sad_1, center = TRUE, scale = TRUE) #Z score
wf_dt2$BMIS_angry_1_Z <- scale(wf_dt2$BMIS_angry_1, center = TRUE, scale = TRUE) #Z score
wf_dt2$BMIS_outraged_1_Z <- scale(wf_dt2$BMIS_outraged_1, center = TRUE, scale = TRUE) #Z score
wf_dt2$BMIS_empathetic_1_Z <- scale(wf_dt2$BMIS_empathetic_1, center = TRUE, scale = TRUE) #Z score
wf_dt2$article_feel_Z <- scale(wf_dt2$article_feel, center = TRUE, scale = TRUE) #Z score
wf_dt2$article_sentiment_Z <- scale(wf_dt2$article_sentiment, center = TRUE, scale = TRUE) #Z score
wf_dt2$article_tone_Z <- scale(wf_dt2$article_tone, center = TRUE, scale = TRUE) #Z score
```
```{r Z Scoring Variables t2}
wf_dt2$BMIS_guilt_2_Z <- scale(wf_dt2$BMIS_guilt_2, center = TRUE, scale = TRUE) #Z score
wf_dt2$BMIS_shame_2_Z <- scale(wf_dt2$BMIS_shame_2, center = TRUE, scale = TRUE) #Z score
wf_dt2$BMIS_sad_2_Z <- scale(wf_dt2$BMIS_sad_2, center = TRUE, scale = TRUE) #Z score
wf_dt2$BMIS_angry_2_Z <- scale(wf_dt2$BMIS_angry_2, center = TRUE, scale = TRUE) #Z score
wf_dt2$BMIS_outraged_2_Z <- scale(wf_dt2$BMIS_outraged_2, center = TRUE, scale = TRUE) #Z score
wf_dt2$BMIS_empathetic_2_Z <- scale(wf_dt2$BMIS_empathetic_2, center = TRUE, scale = TRUE) #Z score
```
```{r}
wf_dt2 <- wf_dt2 %>% mutate(shame_t1t2_discrepancy = BMIS_shame_2_Z - BMIS_shame_1_Z, 
                            guilt_t1t2_discrepancy = BMIS_guilt_2_Z - BMIS_guilt_1_Z,
                            angry_t1t2_discrepancy = BMIS_angry_2_Z - BMIS_angry_1_Z,
                            outraged_t1t2_discrepancy = BMIS_outraged_2_Z - BMIS_outraged_1_Z,
                            empathetic_t1t2_discrepancy = BMIS_empathetic_2_Z - BMIS_empathetic_1_Z) # higher scores indicate an increase in affect, lower scores indicate decrease in affect
```

# Self-esteem

Below I standardize self-esteem.

```{r Self-esteem}
myscale <- 1:5
wf_dt2 <- wf_dt2 %>%
  mutate(private_CSE1 = min(myscale) - private_CSE1 + max(myscale)) 
wf_dt2 <- wf_dt2 %>%
  mutate(private_CSE2 = min(myscale) - private_CSE2 + max(myscale)) 
wf_dt2$private_CSE2_Z <- scale(wf_dt2$private_CSE2, center = TRUE, scale = TRUE) #Z scores
wf_dt2$private_CSE1_Z <- scale(wf_dt2$private_CSE1, center = TRUE, scale = TRUE) #Z scores
wf_dt2 <- wf_dt2 %>% mutate(private_CSEt1t2_change = private_CSE2_Z - private_CSE1_Z) # higher
wf_dt2$public_CSE2_Z <- scale(wf_dt2$public_CSE2, center = TRUE, scale = TRUE) #Z scores
wf_dt2$public_CSE1_Z <- scale(wf_dt2$public_CSE1, center = TRUE, scale = TRUE) #Z scores
wf_dt2 <- wf_dt2 %>% mutate(public_CSEt1t2_change = public_CSE2_Z - public_CSE1_Z) # higher scores indicate
wf_dt2$SE_2_Z <- scale(wf_dt2$SE_2, center = TRUE, scale = TRUE) #Z scores
wf_dt2$SE_1_Z <- scale(wf_dt2$SE_1, center = TRUE, scale = TRUE) #Z scores
wf_dt2 <- wf_dt2 %>% mutate(SE_t1t2_change = SE_2_Z - SE_1_Z) # higher scores indicate increases while negative score indicate decreases
wf_dt2$SE_t1t2_change_Z <- scale(wf_dt2$SE_t1t2_change, center = TRUE, scale = TRUE) #Z scores

```
# Collective Narcissim Scale

```{r Cronbach alpha for Collective Narcissm}
collective_n <- select(wf_dt2, 84:91)
psych::alpha(collective_n)
```
```{r Collective Narcissm Variables}
wf_dt2$collective_n <- rowMeans(wf_dt2[,84:91])
wf_dt2$collective_n_Z <- scale(wf_dt2$collective_n, center = TRUE, scale = TRUE) #Z scores 
```
# Social Dominance Orientation
```{r}
myscale <- 1:7 #defining scale to reverse defensivness variable
wf_dt2 <- wf_dt2 %>%
  mutate(SDO_5 = min(myscale) - SDO_5 + max(myscale), SDO_6 = min(myscale) - SDO_6 + max(myscale), SDO_7 = min(myscale) - SDO_7 + max(myscale), SDO_8 = min(myscale) - SDO_8 + max(myscale), SDO_13 = min(myscale) - SDO_13 + max(myscale), SDO_14 = min(myscale) - SDO_14 + max(myscale), SDO_15 = min(myscale) - SDO_15 + max(myscale), SDO_16 = min(myscale) - SDO_16 + max(myscale))
```
```{r Cronbach alpha for SDO}
sdo <- select(wf_dt2, 92:107)
psych::alpha(sdo)
```
```{r SDO variables}
wf_dt2$sdo <- rowMeans(wf_dt2[,92:107])
wf_dt2$sdo_Z <- scale(wf_dt2$sdo, center = TRUE, scale = TRUE) #Z scores 
```
```{r}
summary(lm(defensive_reverse_Z ~ sdo_Z*article_condition, wf_dt2))
summary(lm(BMIS_outraged_2_Z ~ sdo_Z*article_condition, wf_dt2))
summary(lm(BMIS_shame_2_Z ~ sdo_Z*article_condition, wf_dt2))
```

# Color blind ideology
```{r}
color_blind <- select(wf_dt2, 124:136)
psych::alpha(color_blind)
```
```{r}
wf_dt2$color_blind <- rowMeans(wf_dt2[,124:136])
wf_dt2$color_blind_Z <- scale(wf_dt2$color_blind, center = TRUE, scale = TRUE) #Z scores 
```

# Brand Identity
```{r}
brand_identity <- select(wf_dt2, 139:143)
psych::alpha(brand_identity)
```
```{r}
wf_dt2$brand_identity <- rowMeans(wf_dt2[,139:143])
wf_dt2$brand_identity_Z <- scale(wf_dt2$brand_identity, center = TRUE, scale = TRUE) #Z scores 
```

# Racial Centrality
```{r}
myscale <- 1:7 #defining scale to reverse defensivness variable
wf_dt2 <- wf_dt2 %>%
  mutate(RacialCentrality_1 = min(myscale) - RacialCentrality_1 + max(myscale), 
         RacialCentrality_4 = min(myscale) - RacialCentrality_4 + max(myscale),
          RacialCentrality_8 = min(myscale) - RacialCentrality_8 + max(myscale))
```
```{r Cronbach alpha for racial centrality}
racial_centrality <- select(wf_dt2, 147:154)
psych::alpha(racial_centrality)
```
```{r Racial centrality variables}
wf_dt2$racial_centrality <- rowMeans(wf_dt2[,147:154])
wf_dt2$racial_centrality_Z <- scale(wf_dt2$racial_centrality, center = TRUE, scale = TRUE) #Z scores 
```


# Private Regard
```{r}
myscale <- 1:7 #defining scale to reverse defensivness variable
wf_dt2 <- wf_dt2 %>%
  mutate(PrivateRegard_4 = min(myscale) - PrivateRegard_4 + max(myscale))
```
```{r Cronbach alpha for private regard}
private_regard <- select(wf_dt2, 155:160)
psych::alpha(private_regard)
```
```{r private regard variables}
wf_dt2$private_regard <- rowMeans(wf_dt2[,155:160])
wf_dt2$private_regard_Z <- scale(wf_dt2$private_regard, center = TRUE, scale = TRUE) #Z scores 
```


# Public Regard
```{r}
myscale <- 1:7 #defining scale to reverse defensivness variable
wf_dt2 <- wf_dt2 %>%
  mutate(PublicRegard_4 = min(myscale) - PublicRegard_4 + max(myscale), 
         PublicRegard_3 = min(myscale) - PublicRegard_3 + max(myscale))
```
```{r Cronbach alpha for public regard}
public_regard <- select(wf_dt2, 161:166)
psych::alpha(public_regard)
```
```{r Racial public regard}
wf_dt2$public_regard <- rowMeans(wf_dt2[,161:166])
wf_dt2$public_regard_Z <- scale(wf_dt2$public_regard, center = TRUE, scale = TRUE) #Z scores 
```


# Public Awareness regarding Racial Issues
```{r Cronbach alpha for public awareness}
public_aware <- select(wf_dt2, 108:111)
psych::alpha(public_aware)
```
```{r public awareness variables}
wf_dt2$public_aware <- rowMeans(wf_dt2[,161:166])
wf_dt2$public_aware_Z <- scale(wf_dt2$public_aware, center = TRUE, scale = TRUE) #Z scores 
```


# Normative pressure regarding Racial Issues
```{r Cronbach alpha for Normative Pressure}
norm_pressure <- select(wf_dt2, 112:115)
psych::alpha(norm_pressure)
```
```{r Normative Pressure variables}
wf_dt2$norm_pressure <- rowMeans(wf_dt2[,112:115])
wf_dt2$norm_pressure_Z <- scale(wf_dt2$norm_pressure, center = TRUE, scale = TRUE) #Z scores 
```


# Positive Racial Climate
```{r Cronbach alpha for Racial Climate}
racial_climate <- select(wf_dt2, 116:119)
psych::alpha(racial_climate)
```
```{r Racial Climate variables}
wf_dt2$racial_climate <- rowMeans(wf_dt2[,116:119])
wf_dt2$racial_climate_Z <- scale(wf_dt2$racial_climate, center = TRUE, scale = TRUE) #Z scores 
```


# Discrimination Concern
```{r}
myscale <- 1:5 #defining scale to reverse defensivness variable
wf_dt2 <- wf_dt2 %>%
  mutate(disc_concern_1 = min(myscale) - disc_concern_1 + max(myscale), 
         disc_concern_2 = min(myscale) - disc_concern_2 + max(myscale))
```
```{r Cronbach alpha for Discrimination Concern}
discrimination_concern <- select(wf_dt2, 120:123)
psych::alpha(discrimination_concern)
```
```{r Discrimination Concern variables}
wf_dt2$discrimination_concern <- rowMeans(wf_dt2[,120:123])
wf_dt2$discrimination_concern_Z <- scale(wf_dt2$discrimination_concern, center = TRUE, scale = TRUE) #Z scores 
```


# Interracial Contact
```{r}
myscale <- 1:6 
wf_dt2 <- wf_dt2 %>%
  mutate(interracial_contact_2 = min(myscale) - interracial_contact_2 + max(myscale), 
         interracial_contact_3 = min(myscale) - interracial_contact_3 + max(myscale),
         interracial_contact_4 = min(myscale) - interracial_contact_4 + max(myscale))
```
```{r Cronbach alpha for Discrimination Concern}
interracial_contact <- select(wf_dt2, 168:174)
psych::alpha(interracial_contact)
```
```{r Discrimination Concern variables}
wf_dt2$interracial_contact <- rowMeans(wf_dt2[,168:174])
wf_dt2$interracial_contact_Z <- scale(wf_dt2$interracial_contact, center = TRUE, scale = TRUE) #Z scores 
```



```{r}
# Calculate correlation between variables
cor_matrix <- wf_dt2 %>%
select(
  "collective_n_Z", "sdo_Z", "color_blind_Z", "brand_identity_Z", "racial_centrality_Z",
  "private_regard_Z", "public_regard_Z", "public_aware_Z", "norm_pressure_Z",
  "racial_climate_Z", "discrimination_concern_Z", "interracial_contact_Z", "defensive_reverse_Z", "bias_aware_Z") %>%
  cor(use = "pairwise.complete.obs")

# Create a function to calculate p-values
get_p_value <- function(x, y) {
  cor_test <- cor.test(x, y, method = "pearson")
  return(cor_test$p.value)
}

# Calculate p-values for the correlations
p_values <- outer(colnames(cor_matrix), colnames(cor_matrix), 
                   Vectorize(function(x, y) get_p_value(cor_matrix[, x], cor_matrix[, y])))

# Create a dataframe for the correlation values and p-values
corr_data <- data.frame(variables = rep(colnames(cor_matrix), each = ncol(cor_matrix)),
                        others = rep(colnames(cor_matrix), ncol(cor_matrix)),
                        corr_values = as.vector(cor_matrix),
                        p_value = as.vector(p_values))

# Create a function to add asterisks based on p-values
add_asterisk <- function(p_value) {
  if (p_value < 0.05) {
    return("*")
  } else {
    return("")
  }
}

# Apply the function to generate the asterisk labels
corr_data$asterisks <- sapply(corr_data$p_value, add_asterisk)

# Create a heatmap for the correlation matrix with labels and significance asterisks
heatmap_plot <- ggplot(data = corr_data, aes(x = variables, y = others, fill = corr_values)) +
  geom_tile() +
  geom_text(aes(label = sprintf("%.2f", corr_values)), color = "black", size = 1.5) +  # Further reduce the font size for correlation values
  geom_text(aes(label = asterisks), color = "black", size = 2) +  # Further reduce the font size for significance asterisks
  scale_fill_gradient2(low = "beige", mid = "green", high = "darkgreen", 
                       midpoint = 0, limits = c(-1, 1)) +
  labs(title = "Correlation Heatmap",
       x = "Variables",
       y = "Other Variables") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),  # Adjust the size of x-axis labels
        axis.text.y = element_text(size = 8))  # Adjust the size of y-axis labels

# Display the heatmap
print(heatmap_plot)

```
```{r saving correlation matrix}
# Install and load the writexl package if not already installed
# install.packages("writexl")
library(writexl)

# Specify the file path where you want to save the Excel file
excel_file_path <- "correlation_matrix.xlsx"

# Write the correlation matrix to an Excel sheet
write_xlsx(corr_data, path = excel_file_path)

# Display the file path to confirm where the Excel file is saved
excel_file_path

```

